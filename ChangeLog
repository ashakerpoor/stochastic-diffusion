This is an update to stochdiff_BHK-2.1.1-newtable_NP30.jar  The only differences with that file is debugging of the deterministic solver.
Debugged/Updated parts
1. Stimulation.  Two arrays are created, eltstims and esltstimshare, which store information on
which voxels and which molecules are affected by the stimulation.  Originally, these arrays were one dimensional. 
Thus, only information on the last stimulation was stored.  These have been changed to two dimensional arrays.  
In addition, eltstimshare stores the fraction of the injection that goes to each voxel in the case when such injection goes to 
multiple spines.  It was calculating the volume incorrectly because of an indexing problem.  This has been fixed.
2. The stimulation was being placed into a concinc array, used in the reaction step.  However, it was not accumulating multiple
injections each time step, so only one injection was being used.  I had to change this part so that concinc accumulated all the
stimulations, and thus needed a new variable to determine whether the stimulation was non-zero.  This is not necessarily the
most efficient way of doing it.
3.  Numerical method:  the diffusion used three different arrays, at times t-1 (wkA), t (wkB) and t+1 (wkC).
the reactions used only two arrays. The arrays were cycled once per time step.  Yet, it appeared as if reactions 
were 2/3 the rate compared to stochastic.  In addition, the stimulation was half of what it was for the stochastic.  This latter
was fixed by doubling the stimulation, but did nothing for reactions.  Two other possibilities: cycle the arrays twice per time step - 
once after diffusion and once after the reactions.  Or, eliminate one of the arrays.  The diffusion step calculates
the gradient between wkA(x) and wkB(neighbor).  I made both of the these arrays the same, and it seems to work.
This also fixed the problem of injection amount.  Since the wkB array was no longer needed, I've commented out its creation.
4. With dt too big, the solution either blows up, or doesn't match stochastic.  I put in a threshold for the diffusion step.  
The threshold compares ff ( 2. * diffcoef * dt * couplingcoeff/ vol ) with 0.2 (chosen empiricially).  Perhaps a theoretical
 threshold would be better.