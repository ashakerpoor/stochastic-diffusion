
package catacomb.calc.cell; 

import java.util.*;


public abstract class CellDiscretizer {


   public static CellPoint[] merge(CellPoint[] pt,
				   double maxdr, double maxlen,
				   double tol) {

      
      for (int i = 0; i < pt.length; i++) pt[i].setWork(2);
      
      CellPoint p0 = pt[0];
      recMerge(p0, maxdr, maxlen, tol);

      // remove dead points.
      int nl = 0;
      for (int i = 0; i < pt.length; i++) if (pt[i].getWork() > 0) nl++;
      CellPoint[] pr = new CellPoint[nl];
      nl = 0;
      for (int i = 0; i < pt.length; i++) {
	 if (pt[i].getWork() > 0) pr[nl++] = pt[i];     
      }
      return pr;
   }


   public static void recMerge(CellPoint cp, double maxdr, double maxlen, 
			       double tol) {
      // may have already been done
      cp.setWork(1);

      for (int j = 0; j < cp.nnbr; j++) {
	 CellPoint cq = cp.nbr[j];
	 if (cq.getWork() == 2 && cq.nnbr == 2 && 
	     Math.abs((cq.r-cp.r)/(cq.r+cp.r)) < 0.5 * maxdr &&
	     cp.distanceTo(cq) < maxlen) {
	    // if nnbr is not two, either it is a terminal, or a branch point:
	    // in either case there is nothing to do;

	    CellPoint cprev = cp;
	    ArrayList vpt = new ArrayList();
	    double ltot = 0.;
	    double ldtot = 0.;
	    while (cq.nnbr == 2 && 
		   cprev.distanceTo(cq) < maxlen &&
		   Math.abs((cq.r-cp.r)/(cq.r+cp.r)) < 0.5 * maxdr) {
	       vpt.addElement(cq);
	       double dl = cprev.distanceTo(cq);
	       ltot += dl;
	       ldtot += dl * (cprev.r + cq.r); 
	       
	       CellPoint cnxt = (cq.nbr[0] == cprev ? cq.nbr[1] : cq.nbr[0]);
	       cprev = cq;
	       cq = cnxt;
	    }
	    double dl = cprev.distanceTo(cq);
	    ltot += dl;
	    ldtot += dl * (cprev.r + cq.r); 
	    
	    
	    double lab = cp.distanceTo(cq);
	    double ldab = lab * (cp.r + cq.r);
	    int nadd = (int)(ltot / maxlen);
	    if (nadd > vpt.size()) nadd = vpt.size(); //cant happen at present;
	    // recycle nadd points;

	    boolean cor =  (Math.abs((lab-ltot)/(lab+ltot)) > 0.5 * tol ||
			    Math.abs((ldab-ldtot)/(ldab+ldtot)) > 0.5 * tol);
	    if (cor && nadd == 0) nadd = 1;

	    if (nadd == 0) {
	       cp.replaceNeighbor((CellPoint)vpt.elementAt(0), cq);
	       cq.replaceNeighbor((CellPoint)vpt.elementAt(vpt.size()-1),
				  cp);
	    } else {
	       for (int i = 0; i < nadd; i++) {
		  CellPoint cm = (CellPoint)vpt.elementAt(i);
		  cm.setWork(1);
		  cm.locateBetween(cp, cq, (1.+ i)/(1.+ nadd));
		  if (i == nadd-1 && nadd < vpt.size()) {
		     cm.replaceNeighbor((CellPoint)vpt.elementAt(nadd), cq);
		     cq.replaceNeighbor((CellPoint)vpt.elementAt(vpt.size()-1),
					cm);
		  }
	       } 
	    }	    


	    // just kill the rest;
	    for (int jd = nadd; jd < vpt.size(); jd++) {
	       CellPoint cd = (CellPoint)vpt.elementAt(jd);
	       cd.nnbr = 0;
	       cd.setWork(0);
	    }
	    

	    if (cor) {
	       double dpar = lab / (nadd+1);
	       double fl = ltot / lab;
	       double dperp = Math.sqrt((fl*fl - 1) * dpar*dpar);
	       double fr = ldtot / (fl * ldab);
	       for (int i = 0; i < nadd; i++) {
		  CellPoint cm = (CellPoint)(vpt.elementAt(i));
		  cm.r *= fr;
		  if (i % 2 == 0) {
		    cm.movePerp(cp, cq, ((i/2) % 2 == 0 ? dperp : - dperp)); 
		  }
	       }

	    }
	    


	    
	 } 
	 if (cq.getWork() == 2) recMerge(cq, maxdr, maxlen, tol);
      }
   }




  /**
   *    divided into segments with equal integral of 
   *    the square root of the radius, given by disqrtr.
   *    This balances the charging rate of points in the final 
   *    discretization and its definition is independent of 
   *    the electrical properties of the membrane. 
   *    It provides a more consistent discretization than the 
   *    electrotonic length, and is valid in the absence of 
   *    persistent currents.
   *
   *    Tapering segments are treated as such and not approximated by a series 
   *    of cylinders. The discretization does, however, respect the 
   *    actual points of the structure to which clamps or recorders 
   *    may be attached.
   */
  public static CellPoint[] discretize(CellPoint[] pt, 
				       double disqrtr, int maxnpt) {

     int np = pt.length;
     double[][][] subdiv = new double[np][6][];
     for (int i = 0; i < np; i++) pt[i].setWork(i);

     int nnp = 0;
     for (int i = 0; i < np; i++) {
	CellPoint cpa = pt[i];
	for (int j = 0; j < cpa.nnbr; j++) {
	   CellPoint cpb = cpa.nbr[j];
	   if (cpa.getWork() < cpb.getWork()) {
	      subdiv[i][j] = getSubdivision(cpa, cpb, disqrtr);
	      nnp += subdiv[i][j].length;
	   }
	}
     }
     
     if (np + nnp > maxnpt) {
	Sp("WARNING - not discretizing: needs too many points ("+np+nnp+")");
	return null;
     } 

     CellPoint[] pr = new CellPoint[np+nnp];
     for (int i = 0; i < np; i++) pr[i] = pt[i];
     int nxp = np;
     
     for (int i = 0; i < np; i++) {
	CellPoint cpa = pt[i];
	for (int j = 0; j < cpa.nnbr; j++) {
	   double[] div = subdiv[i][j];
	   if (div != null && div.length > 0) {
	      CellPoint cpb = cpa.nbr[j];
	      CellPoint clast = null;
	      for (int id = 0; id < div.length; id++) {
		 CellPoint cp = new CellPoint();
		 cp.locateBetween(cpa, cpb, div[id]);
		 pr[nxp++] = cp;
		 if (id == 0) {
		    cpa.replaceNeighbor(cpb, cp);
		    cp.addNeighbor(cpa);
		 }
		 if (id == div.length-1) {
		    cpb.replaceNeighbor(cpa, cp);
		    cp.addNeighbor(cpb);
		 }
		 if (clast != null) {
		    cp.addNeighbor(clast);
		    clast.addNeighbor(cp);
		 }
		 clast = cp;
	      }
	   }
	}
     }	      
     return pr;
  }
  

  public static double[] getSubdivision(CellPoint cpa, CellPoint cpb, 
					double disqrtr) {
     double dab = cpa.distanceTo(cpb);
     double ra = cpa.r;
     double rb = cpb.r;
     
     double lbya = 0.;
     double aseg = 0.;
     double fdist = 0.0;  
     // fdist is to be the integral in question between pta and ptb;
     if (rb != ra) {
	fdist = ((2./3.) * dab  / (rb - ra) * 
		 (Math.pow (rb, 3./2.) - Math.pow (ra, 3./2.)));
	lbya = dab * (1./rb - 1./ra) / (Math.PI * (ra - rb));
	
     } else {
	fdist = dab * Math.sqrt(ra);
	lbya = dab / (Math.PI * ra * ra);
     }
     aseg = dab * Math.PI * (ra + rb);
     
     int nadd = (int) (fdist / disqrtr);
     
     double[] dpos = new double[nadd];
     
     if (nadd > 0) {
	
	if (Math.abs((ra-rb)/(ra+rb)) < 0.01) {
	   for (int i = 0; i < nadd; i++) dpos[i] = (1.+i) / (nadd+1.);
	   
	} else {
	   // chop up the carrot;
	   double delf = fdist / (nadd+1);
	   double ffa = (rb - ra) / dab;      // dr/dx
	   double xa = ra / ffa;
	   double xb = rb / ffa;
	   // xa and xb are the end positions measured from where 
	   // the carrot comes to a point.
	   double x = xa;
	   
	   // the integral of sqrt(r) dx is 
	   // 2/3 * dx / (rb-ra) * (rb^3/2 - ra^3/2)
	   // so need dx such that this is delf (= total_int / nseg)
	   
	   for (int i = 0; i < nadd+1; i++) {
	      double ttt = (delf * ffa * 3./2. + 
			    Math.pow (ffa * x, 3./2.));
	      double dx = Math.pow (ttt, (2./3.)) / ffa - x;
	      x += dx;
	      if (i < nadd) dpos[i] = (x - xa) / dab;
	   }
	   if (Math.abs (xb - x) > 1.e-5) {
	      Sp ("ERROR : ECNet segment division " + xa + " " + xb + 
		   " " + x + " " + nadd + " " +dab + " " +ra+ " " + rb);
	   }
	}
     }
     return dpos;
  }


   public static void Sp(String s) { System.out.println(s); }


}



