package org.enorg.visua.twod;


import java.awt.*;


public final class LinePainter {



   public final void drawPointer (Graphics g, double x0, double y0, 
			 int dx, int dy, double a) {
      int   px0, py0, px1, py1;
      px0 = powx (x0);
      py0 = powy (y0);

      int[] xp = new int[3];
      int[] yp = new int[3];

      dy = -dy;
      
      xp[0] = px0 - dx - (int) (a * dy);
      yp[0] = py0 - dy + (int) (a * dx);

      xp[1] = px0 - dx + (int) (a * dy);
      yp[1] = py0 - dy - (int) (a * dx);

      xp[2] = px0;
      yp[2] = py0;

      if (BoW) bwOnly(g);
      g.fillPolygon (xp, yp, 3);
      //      g.drawLine (px0, py0, px1, py1);  
   }




   public final void drawShadedLine (Graphics g, double x0, double y0, 
			       double x1, double y1, Color c) {
      int   px0, py0, px1, py1;
      px0 = powx (x0);
      px1 = powx(x1);
      py0 = powy (y0);
      py1 = powy (y1);

      g.setColor (c.brighter());
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0-1, px1, py1-1);
      g.setColor (c);
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0, px1, py1);
      g.setColor (c.darker());
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0+1, px1, py1+1);
  
   }

   public final void drawShadedLine (Graphics g, int px0, int py0, int px1, int py1, 
			       Color c) {
      py0 = imh - py0;
      py1 = imh - py1;
      
      g.setColor (c.brighter());
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0-1, px1, py1-1);
      g.setColor (c);
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0, px1, py1);
      g.setColor (c.darker());
      if (BoW) bwOnly(g);
      g.drawLine (px0, py0+1, px1, py1+1);
  
   }





   public final void drawLine (Graphics g, int x0,  int y0, 
			 int x1, int y1) {
      drawLine (g, (double) x0, (double) y0, (double) x1, (double) y1);
   }


   public final void drawDirectedLine (Graphics g, double x0, double y0, 
			 double dx, double dy, int npix) {
      int px0 = powx (x0);
      int py0 = powy (y0);
      int px1 = silentpowx(x0+dx);
      int py1 = silentpowy (y0+dy);
      double dl = Math.sqrt((py1-py0)*(py1-py0) + (px1-px0)*(px1-px0));
      if (dl > 0.) {
	 double f = npix / dl;
	 px1 = powx(x0 + f * dx);
	 py1 = powy(y0 + f * dy);
	 g.drawLine (px0, py0, px1, py1);  
      }
   }




   public final void drawLine (Graphics g, double x0, double y0, 
			 double x1, double y1) {
      int   px0, py0, px1, py1;
      px0 = powx (x0);
      px1 = powx(x1);
      py0 = powy (y0);
      py1 = powy (y1);
      g.drawLine (px0, py0, px1, py1);  
   }



   public final void drawHalfLine (Graphics g, double x0, double y0, 
			    double x1, double y1) {
      int   px0, py0, px1, py1;
      px0 = powx(x0);
      px1 = powx(0.5 * (x0+x1));
      py0 = powy (y0);
      py1 = powy (0.5 * (y0 + y1));
      g.drawLine (px0, py0, px1, py1);  
   }
   





   public final void drawData (Graphics g, float[] x, float[] y, int np) {

      if (np > maxPoints) np = maxPoints;

      int[] ix = new int[np];
      int[] iy = new int[np];
      
      int wp = width + 200;
      int hp = height + 200;

      for (int i = 0; i < np; i++) {
	 ix[i] = powx(x[i]);
	 ix[i] = (ix[i] < -200 ? -200 : ix[i]); 
	 ix[i] = (ix[i] > wp ? wp : ix[i]); 
	 
	 iy[i] = powy(y[i]);
	 iy[i] = (iy[i] < -200 ? -200  : iy[i]); 
	 iy[i] = (iy[i] > hp ? hp   : iy[i]); 
      }
      if (BoW) bwOnly(g);

      g.drawPolyline (ix, iy, np);
   }
   


   public final void drawData (Graphics g, float[] x, float[] y, int[] rn) {
      int np = rn[1]-rn[0];

      if (np > maxPoints) np = maxPoints;

      int[] ix = new int[np];
      int[] iy = new int[np];
      
      for (int i = 0; i < np; i++) {
	 ix[i] = powx(x[rn[0]+i]);
	 ix[i] = (ix[i] < -10      ? -10     : ix[i]); 
	 ix[i] = (ix[i] > width+10  ? width+10 : ix[i]); 
	 
	 iy[i] = powy(y[rn[0]+i]);
	 iy[i] = (iy[i] < -10       ? -10        : iy[i]); 
	 iy[i] = (iy[i] > height+10  ? height+10   : iy[i]); 
      }

      if (BoW) bwOnly(g);
      g.drawPolyline (ix, iy, np);
   }


   



   public final void drawThickData (Graphics g, double[] x, double[] y, int
			      np, int thickness) {

      if (np > maxPoints) np = maxPoints;

      int[] ix = new int[np];
      int[] iy = new int[np];
      int[] ixt = new int[np];
      int[] iyt = new int[np];
    for (int i = 0; i < np; i++) {
       ix[i] = powx (x[i]);
       ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
       ix[i] = (ix[i] > width  ? width : ix[i]); 
       
       iy[i] = powy(y[i]);
       iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
       iy[i] = (iy[i] > height  ? height   : iy[i]); 
       
    }
      
      if (BoW) bwOnly(g);
      g.drawPolyline (ix, iy, np);
      
      for (int ith = 1; ith < thickness; ith++) {
	 for (int i = 0; i < np; i++){
	    ixt[i] = ix[i] + ith;
	    iyt[i] = iy[i] + ith;
	 }
	 g.drawPolyline (ix,  iyt, np);
	 g.drawPolyline (ixt, iy,  np);
      }
   }


   public final void drawColorTableLine (Graphics g, double x0, double y0, 
				   double x1, double y1, double z) {
      drawLine (g, x0, y0, x1, y1);
   }




   /*
  public final void drawColorTableLineList (Graphics g, ColorTable ctab,
				      double[][] d2) {
    
     Color[] cols = ctab.getColors();
     int ncol = cols.length;
     double cmax = ctab.Cmax;
     double cmin = ctab.Cmin;
     double dc = (cmax - cmin) / ncol;
     if (dc <= 0.0) dc = 1.0;
     
     int nl = d2[0].length;
     for (int i = 0; i < nl; i++) {
	int icol = (int) ((d2[6][i] - cmin) / dc);
	icol = (icol < 0 ? 0 : (icol >= ncol ? ncol-1 : icol));
	g.setColor (cols[icol]);       
	
	drawLine (g, d2[0][i], d2[1][i], d2[3][i], d2[4][i]);
     } 
  }
   */



   
   
   public final void drawXyxyLineList (Graphics g, double[][] d2, int nlin) {
      for (int i = 0; i < nlin; i++) {
	 double[] d = d2[i];
	 drawLine (g, d[0], d[1], d[2], d[3]);
      } 
      
   }
   






   public final void drawOffsetData (Graphics g, double[] x, double[] y, int np, 
			       int ixoff, int iyoff) {


      int[] ix = new int[np];
      int[] iy = new int[np];
      
      for (int i = 0; i < np; i++) {
	 ix[i] = ixoff + powx (x[i]);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = iyoff + powy(y[i]);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (BoW) bwOnly(g);

      g.drawPolyline (ix, iy, np);
   }





   public final void drawPerpOffsetData (Graphics g, double[] x, double[] y, 
					 int np, int nps, int po) {
      // this is a bit of a fiddle so that arrows look right...----;
      // the shift is only perpendicular up to nps.


      int[] ix = new int[np];
      int[] iy = new int[np];
      int xpo = 0;
      int ypo = 0;
      
      double dx = 0.0;
      double dy = 0.0;

      //------ WARNING - uses dpdwx here;
      for (int i = 0; i < np; i++) {
	 if (i < nps-1) {
	    if (i > 0) {
	       dx = dpdwx * (x[i+1] - x[i-1]);
	       dy = dpdwy * (y[i+1] - y[i-1]);
	    } else {
	       dx = dpdwx * (x[i+1] - x[i]);
	       dy = dpdwy * (y[i+1] - y[i]);
	    }
	    double dl = Math.sqrt (dx*dx + dy*dy);
	    if (dl > 0.0) {
	       dx *= po / (dl * dpdwy);
	       dy *= po / (dl * dpdwx);
	    }
	 }
	 ix[i] =  powx (x[i] - dy);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(y[i] + dx);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (BoW) bwOnly(g);

      g.drawPolyline (ix, iy, np);
   }

   




   public final void drawLLdata (Graphics g, double[] x, double[] y, int np, 
			   boolean xlog, boolean ylog, String slab) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;
      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      if (xlog) {
	for (int i = 0; i < np; i++) {
	  ix[i] = (x[i] > 0.0 ? powx (reclogten * Math.log(x[i])) : -1);
	}
      } else {
	for (int i = 0; i < np; i++) ix[i] = powx (x[i]);
      }
      
      if (ylog) {
	for (int i = 0; i < np; i++) {
	  iy[i] = (y[i] > 0.0 ? powy (reclogten * Math.log(y[i])) : height);
	}
      } else {
	for (int i = 0; i < np; i++) iy[i] = powy (y[i]);
      }

      if (np == 1) {
	 g.drawOval (ix[0]-2, iy[0]-2, 4, 4);
      } else {
	 g.drawPolyline (ix, iy, np);
      }
      
      //      if (slab != null) g.drawString (slab, ix[np-1]+2, iy[np-1]+3);
   }



   public final void drawLLpoints (Graphics g, double[] x, double[] y, int np, 
			   boolean xlog, boolean ylog, String slab) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;
      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      if (xlog) {
	for (int i = 0; i < np; i++) {
	  ix[i] = (x[i] > 0.0 ? powx (reclogten * Math.log(x[i])) : -1);
	}
      } else {
	for (int i = 0; i < np; i++) ix[i] = powx (x[i]);
      }
      
      if (ylog) {
	for (int i = 0; i < np; i++) {
	  iy[i] = (y[i] > 0.0 ? powy (reclogten * Math.log(y[i])) : height);
	}
      } else {
	for (int i = 0; i < np; i++) iy[i] = powy (y[i]);
      }

      for (int i = 0; i < np; i++) g.drawOval (ix[i]-2, iy[i]-2, 4, 4);
   }






   public final void drawColoredPoints (Graphics g, double[] x, double[] y, 
					int[] icol, Color[] cols) { 
      int np = x.length;
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;
      if (BoW) bwOnly(g);
      
      int[] ix = new int[np];
      int[] iy = new int[np];
      
      for (int i = 0; i < np; i++) ix[i] = powx (x[i]);
      for (int i = 0; i < np; i++) iy[i] = powy (y[i]);
      
      if (cols == null || cols.length < 1) { 
	 cols = new Color[200];
	 for (int i = 0; i < cols.length; i++) cols[i] = Color.white;
      }
      
      for (int i = 0; i < np; i++) {
	 if (icol[i] < cols.length) {
	    g.setColor(cols[icol[i]]);
	 } else {
	    g.setColor(Color.white);
	 }
	 g.fillOval (ix[i]-1, iy[i]-1, 3, 3);
      }
   }
   



   public final void drawOffsetScaledData (Graphics g, double ax, double bx, 
				     double ay, double by,
				     double[] x, double[] y, int np) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;
      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      for (int i = 0; i < np; i++) {
	 ix[i] = powx (ax * x[i] + bx);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(ay * y[i] + by);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (np == 1) {
	 g.drawOval (ix[0]-2, iy[0]-2, 4, 4);
      } else {
	 g.drawPolyline (ix, iy, np);
      }
   }





   public final void drawParallelLines (Graphics g, double xa, double ya,
				 double xb, double yb, int npix) {

      int ixa = powx(xa);
      int ixb = powx(xb);
      int iya = powy(ya);
      int iyb = powy(yb);

      int vpx = iyb - iya;
      int vpy = ixa - ixb;
      double vl = Math.sqrt (vpx*vpx + vpy*vpy);
      vpx = (int) (npix * vpx / vl);
      vpy = (int) (npix * vpy / vl);
      g.drawLine (ixa+vpx, iya+vpy, ixb+vpx, iyb+vpy);
      g.drawLine (ixa-vpx, iya-vpy, ixb-vpx, iyb-vpy);
   }


   public final void drawParallelLines (Graphics g, double[] x, double[] y, int np, 
				  double zp0, double dzp, int nl, boolean tie){

      Color[] cols = new Color[nl];
      Color c = g.getColor();
      for (int i = 0; i < nl; i++) cols[i] = c;
      drawParallelLines (g, x, y, np, zp0, dzp, nl, tie, cols);
   }


   public final void drawParallelLines (Graphics g, double[] x, double[] y, int np, 
				  double zp0, double dzp, int nl, boolean tie,
				  Color[] cols) {
      if (BoW) bwOnly(g);

      double[] dxp = new double[np];
      double[] dyp = new double[np];
      
      double vxl = y[0] - y[1]; 
      double vyl = x[1] - x[0];
      double vxn = 0.0;
      double vyn = 0.0;
      double vm = Math.sqrt (vxl*vxl + vyl*vyl); 
      if (vm <= 0.0) vm = 1.0;
      vxl /= vm;
      vyl /= vm;
      dxp[0] = vxl;
      dyp[0] = vyl;

      for (int i = 1; i < np-1; i++) {
	 vxn = y[i] - y[i+1]; 
	 vyn = x[i+1] - x[i];
	 vm = Math.sqrt (vxn*vxn + vyn*vyn); 
	 if (vm <= 0.0) vm = 1.0;
	 vxn /= vm;
	 vyn /= vm;
	 // necesary factor = 1/2cos^2 theta = 1/(1+cos2 theta)
	 // where 2 theta is the angle between the lines;
	 double ff = 1. / (1. + vxl * vxn + vyl * vyn);

	 if(tie) {
	    if (ff > 1.) ff = 1.;
	    if (ff < -1.) ff = -1.;
	 }

	 dxp[i] = ff * (vxl + vxn);
	 dyp[i] = ff * (vyl + vyn);
	 vxl = vxn;
	 vyl = vyn;
      }

      dxp[np-1] = vxn;
      dyp[np-1] = vyn;



      double[] dxd = new double[np];
      double[] dyd = new double[np];

      for (int i = 0; i < nl; i++) {
	 double fff = zp0 + dzp * i;
	 for (int j = 0; j < np; j++) {
	    dxd[j] = x[j] + fff * dxp[j];
	    dyd[j] = y[j] + fff * dyp[j];
	 }
	 g.setColor (cols[i]);
	 if (BoW) bwOnly(g);

	 drawData (g, dxd, dyd, np); 
      }
   }







   public final void drawScurve (Graphics g, double x0, double y0, 
			  double dx0, double dy0, 
			  double x1, double y1, int n) {
      
      double vx, vy, vl, dx, dy, dl, f, alp0, alp;
      
      double r = 0.03;
      double alpa = 0.1;
      double alpb = 0.4;

      double[] xp = new double[n];
      double[] yp = new double[n];

      xp[0] = x0;
      yp[0] = y0;
      dx = dx0;
      dy = dy0;
      for (int i = 1; i < n; i++) {
	 alp0 = alpa + (alpb * i) / (n-1);
	 vx = x1 - xp[i-1];
	 vy = y1 - yp[i-1];
	 vl = Math.sqrt (vx*vx + vy*vy);
	 alp = (i == 1 ? alp0/2 : ( i == n-1 ? 1. : alp0));
	 
	 dl = Math.sqrt (dx*dx + dy*dy);
	 dx = (1. - alp) * dx/dl + alp * vx/vl;
	 dy = (1. - alp) * dy/dl + alp * vy/vl;
	 f = (vl - r) / (n - i);
	 xp[i] = xp[i-1] + f * dx;
	 yp[i] = yp[i-1] + f * dy;
      }
      drawData (g, xp, yp, n);
   }


   
   public final void draw3PtCurve (Graphics g, double[] xp, double[] yp, int np) {
      int nh = 16;
      double dx0 = xp[2] - xp[0];
      double dy0 = yp[2] - yp[0];
      if (Math.abs (dx0) < 0.01 && Math.abs (dy0) < 0.01) {
	 dy0 = xp[1] - 0.5 * (xp[0] + xp[2]);
	 dx0 = -yp[1] + 0.5 * (yp[0] + yp[2]);
      }
      drawScurve (g, xp[1], yp[1], -dx0, -dy0, xp[0], yp[0], nh);
      drawScurve (g, xp[1], yp[1], dx0, dy0, xp[2], yp[2], nh);

   }


   public final void drawLine (Graphics g, double[] x, double[] y) {
      drawData(g, x, y, x.length);
   }

   public final void drawData (Graphics g, double[] x, double[] y, int np) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;

      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      for (int i = 0; i < np; i++) {
	 ix[i] = powx (x[i]);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(y[i]);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (np == 1) {
	 g.drawOval (ix[0]-2, iy[0]-2, 4, 4);
      } else {
	 g.drawPolyline (ix, iy, np);
      }
   }



   public final void drawPoints (Graphics g, double[] x, double[] y, int np) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;

      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      for (int i = 0; i < np; i++) {
	 ix[i] = powx (x[i]);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(y[i]);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      for (int i = 0; i < np; i++) {
         g.drawOval(ix[i]-2, iy[i]-2, 4, 4);
      }
   }







   public final void drawEvents (Graphics g, double[] x, int np) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;

      if (BoW) bwOnly(g);

      int iya = powy(0.);
      int iyb = powy(1.);
      

      for (int i = 0; i < np; i++) {
	 int ixa = powx (x[i]);
	 g.drawLine(ixa, iya, ixa, iyb);
      }
   }





   public final void drawXYXYData (Graphics g, double[] xy) {
      int np = xy.length / 2;
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;

      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      for (int i = 0; i < np; i++) {
	 ix[i] = powx (xy[2*i]);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(xy[2*i+1]);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (np == 1) {
	 g.drawOval (ix[0]-2, iy[0]-2, 4, 4);
      } else {
	 g.drawPolyline (ix, iy, np);
      }
   }




    public final void drawCenterArrowLine(Graphics g, double xa, double ya,
					  double xb, double yb, int npix) {
	drawLine(g, xa, ya, xb, yb);
	double xc = 0.7 * xb + 0.3 * xa;
	double yc = 0.7 * yb + 0.3 * ya;
	drawArrowTo(g, xc, yc, xb - xa, yb - ya, npix);
    }
   


   public final void drawArrowTo (Graphics g, double xp, double yp, 
			   double dx, double dy, int npix) {
      if (BoW) bwOnly(g);


      double theta = Math.atan2 (dy, dx) + Math.PI;
      double dth = 0.35;
      double adx = Math.cos (theta + dth);
      double ady = Math.sin (theta + dth);
      drawDirectedLine(g, xp, yp, adx, ady, npix);

      adx = Math.cos (theta - dth);
      ady = Math.sin (theta - dth);
      drawDirectedLine(g, xp, yp, adx, ady, npix);

   }


    /*

      int ix = powx(xp);
      int iy = powy(yp);

      int ixf = powx(xf);
      int iyf = powy(yf);
      

      double dx = ixf - ix;
      double dy = iyf - iy;
      double theta = Math.atan2(dy, dx);
      double dtheta = 0.4;
      int ixa = (int) (ix + npix * Math.cos (theta + dtheta));
      int iya = (int) (iy + npix * Math.sin (theta + dtheta));

      int ixb = (int) (ix + npix * Math.cos (theta - dtheta));
      int iyb = (int) (iy + npix * Math.sin (theta - dtheta));
      
      
      g.drawLine (ix, iy, ixa, iya);
      g.drawLine (ix, iy, ixb, iyb);
   }
   */



   public final void drawOffsetData (Graphics g, double xoff, double yoff, 
			      double[] x, double[] y, int np) {
      if (np < 1) return;
      if (np > maxPoints) np = maxPoints;

      if (BoW) bwOnly(g);

      int[] ix = new int[np];
      int[] iy = new int[np];

      for (int i = 0; i < np; i++) {
	 ix[i] = powx (x[i] + xoff);
	 ix[i] = (ix[i] < 0      ? 0     : ix[i]); 
	 ix[i] = (ix[i] > width  ? width : ix[i]); 
	 
	 iy[i] = powy(y[i] + yoff);
	 iy[i] = (iy[i] < 0       ? 0        : iy[i]); 
	 iy[i] = (iy[i] > height  ? height   : iy[i]); 
      }
      if (np == 1) {
	 g.drawOval (ix[0]-2, iy[0]-2, 4, 4);
      } else {
	 g.drawPolyline (ix, iy, np);
      }
   }
















}
